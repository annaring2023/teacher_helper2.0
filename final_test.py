# —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å–µ

from fpdf import FPDF
import random
import colorama
from colorama import Fore, Back
colorama.init(autoreset=True)
# –≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è


def operations():
    while True:
        try:
            operation = int(input(
                f"{Fore.WHITE}{Back.WHITE}\n1 - —Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏\n2 - –ø–æ—Ö–≤–∞–ª–∞ –¥–ª—è —É—á–Ω—è\n3 - —Ö—Ç–æ –π–¥–µ –¥–æ –¥–æ—à–∫–∏?\n4 - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É –¥–ª—è —É—á–Ω—è\n5 - —Å—Ç–≤–æ—Ä–µ–Ω—è —Ç–µ—Å—Ç—É\n6 - –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó\n7 - –≤–∏–π—Ç–∏\n–í–∞—à –≤–∏–±—ñ—Ä: "))
        except ValueError:
            print(f"{Fore.RED}–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ")
            continue

        if operation == 1:
            create_teams()
        elif operation == 2:
            create_congrats()
        elif operation == 3:
            single_students()
        elif operation == 4:
            new_note()
        elif operation == 5:
            random_questions()
        elif operation == 6:
            math()
        elif operation == 7:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
            break
        else:
            print(f"{Fore.RED}üÜò –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö!")

# –¥—ñ—Å—Ç–∞—î –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞


def single_students() -> None:
    stud_list = get_students()
    if not stud_list:
        print(f"{Fore.RED}üÜò –°–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫!")
        return
    single_student = random.choice(stud_list)
    print(f"{Fore.GREEN}{single_student}")

# –∫–æ–Ω–≤–µ—Ä—Ç—É—î —Ñ–∞–π–ª –ø–æ—Ö–≤–∞–ª–∏


def get_congrats() -> list:
    with open("congrats.txt", "r", encoding="utf-8") as f:
        return [line.strip() for line in f]

# –≤–∏–≤–æ–¥–∏—Ç—å –æ–¥–Ω—É –ø–æ—Ö–≤–∞–ª—É


def create_congrats() -> None:
    cong_list = get_congrats()
    if not cong_list:
        print(f"{Fore.RED}üÜò –°–ø–∏—Å–æ–∫ –ø–æ—Ö–≤–∞–ª–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫!")
        return
    congratul_message = random.choice(cong_list)
    print(f"{Fore.GREEN}{congratul_message}")

# –∫–æ–Ω–≤–µ—Ä—Ç—É—î —Ñ–∞–π–ª —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤


def get_students() -> list:
    with open("children.txt", "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

# —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î –∫–æ–º–∞–Ω–¥–∏ –∑—ñ —Å–ø–∏—Å–∫—É


def create_teams():
    stud_list = get_students()

    if not stud_list:
        print(f"{Fore.RED}üÜò –°–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫üò°")
        return

    random.shuffle(stud_list)
    quantity_of_students = len(stud_list)
    try:
        team_quantity = int(input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–∂–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥: "))
    except ValueError:
        print(f"{Fore.RED}–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö!")
        return

    if team_quantity <= 0 or team_quantity > quantity_of_students:
        print(f"{Fore.RED}–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–∞–Ω–¥")

    teams = [[] for _ in range(team_quantity)]

    for i, student in enumerate(stud_list):
        teams[i % team_quantity].append(student)

    for i, team in enumerate(teams, 1):
        print(f"{Fore.GREEN}\n–ö–æ–º–∞–Ω–¥–∞ {i}:")
        for student in team:
            print(f"{Fore.GREEN} - {student}")

# —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ö–≤–∞–ª–∏


def new_note() -> dict:
    notes = {}
    stud_list = get_students()
    print(f"{Fore.GREEN}\n–£—á–Ω—ñ:")
    for i, student in enumerate(stud_list):
        print(f"{Fore.GREEN}{i + 1}. {student}")
    try:
        choice = int(input("–Ø–∫–æ–º—É –Ω–æ–º–µ—Ä—É —É—á–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º—ñ—Ç–∫—É?"))
    except ValueError:
        print(f"{Fore.RED}üÜò –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö!")
        return

    if choice > len(stud_list) or choice <= 0:
        print(f"{Fore.RED}üÜò –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–µ —á–∏—Å–ª–æ!")
        return
    student = stud_list[choice - 1]
    note = input(f"–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–º—ñ—Ç–∫—É –¥–ª—è {student}: ")
    notes[student] = note
    save_notes(notes)
    print(f"{Fore.GREEN}‚úÖ –ü—Ä–∏–º—ñ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    return notes

# —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ö–≤–∞–ª–∏ –≤ —Ñ–∞–π–ª—ñ


def save_notes(notes):
    with open("admire.txt", "a", encoding="utf-8") as f:
        for name, note in notes.items():
            f.write(f"{name}: {note}\n")


# –∑–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó


with open("easy.txt", "r", encoding="utf-8") as file_easy:
    easy_questions = [q.strip()
                      for q in file_easy.read().split('\n\n') if q.strip()]

with open("medium.txt", "r", encoding="utf-8") as file_med:
    medium_questions = [q.strip()
                        for q in file_med.read().split('\n\n') if q.strip()]

with open("hard.txt", "r", encoding="utf-8") as file_hard:
    hard_questions = [q.strip()
                      for q in file_hard.read().split('\n\n') if q.strip()]

# –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∏—Ç–∞–Ω—å


def random_questions():
    try:
        easy_num = int(input("–í–≤–µ–¥—ñ—Ç—å –∫-—Ç—å –∑–∞–ø–∏—Ç–∞–Ω—å –ª–µ–≥–∫–æ–≥–æ —Ä—ñ–≤–Ω—è: "))
        medium_num = int(input("–í–≤–µ–¥—ñ—Ç—å –∫-—Ç—å –∑–∞–ø–∏—Ç–∞–Ω—å —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è: "))
        hard_num = int(input("–í–≤–µ–¥—ñ—Ç—å –∫-—Ç—å –∑–∞–ø–∏—Ç–∞–Ω—å —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è: "))
    except ValueError:
        print(f"{Fore.RED}üÜò –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö!")
        return

    if easy_num <= len(easy_questions):
        easy_q = random.sample(easy_questions, easy_num)
    else:
        print(f"{Fore.RED}üÜò–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª—å—à–∞ –Ω—ñ–∂ –∑–∞–ø–∏—Ç–∞–Ω—å")

    if medium_num <= len(medium_questions):
        medium_q = random.sample(medium_questions, medium_num)
    else:
        print(f"{Fore.RED}üÜò–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª—å—à–∞ –Ω—ñ–∂ –∑–∞–ø–∏—Ç–∞–Ω—å")

    if hard_num <= len(hard_questions):
        hard_q = random.sample(hard_questions, hard_num)
    else:
        print(f"{Fore.RED}üÜò–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª—å—à–∞ –Ω—ñ–∂ –∑–∞–ø–∏—Ç–∞–Ω—å")

    with open("test.txt", "w", encoding="utf-8") as f:
        f.write("–õ–µ–≥–∫–∞ –ª–µ–≥–∫—ñ—Å—Ç—å:\n")
        for question in easy_q:
            f.write(f"{question}\n")
        f.write("\n–°–µ—Ä–µ–¥–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Å—Ç—å:\n")
        for question in medium_q:
            f.write(f"{question}\n")
        f.write("\n–í–∞–∂–∫–∞ –≤–∞–∂–∫—ñ—Å—Ç—å:\n")
        for question in hard_q:
            f.write(f"{question}\n")
        print(f"{Fore.GREEN}‚úÖ –í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏–π")
# –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–µ–¥–æ—Ñ–∞–π–ª—É


def generate_pdf(input_file, output_file):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=20)
    with open(input_file, "r", encoding="utf-8") as f:
        for line in f:
            pdf.cell(200, 10, txt=line.strip(), ln=1, align='L')
    pdf.output(output_file)
    print(f"{Fore.GREEN}\n‚úÖ –í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏–π: {output_file}")

# –≤—Å—è –ª–æ–≥—ñ–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó


def math():
    while True:
        try:
            decision_of_operation = int(input(
                f"{Fore.WHITE}{Back.WHITE}\n–í–≤–µ–¥—ñ—Ç—å —è–∫—É –¥—ñ—é –≤–∏ —Ö–æ—á–µ—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏:\n1 - –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n2 - –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è\n3 - –º–Ω–æ–∂–µ–Ω–Ω—è\n4 - –¥—ñ–ª–µ–Ω–Ω—è\n5 - –≤–∏–π—Ç–∏\n–í–∞—à –≤–∏–±—ñ—Ä: "))
            if decision_of_operation == 5:
                print("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É...")
                break
            quantity_of_operation = int(
                input(f"{Fore.WHITE}{Back.WHITE}–°–∫—ñ–ª—å–∫–∏ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ö–æ—á–µ—Ç–µ –≤–∏–≤–µ—Å—Ç–∏ —É —Ñ–∞–π–ª? "))

        except ValueError:
            print(f"{Fore.RED}–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ")
            continue

        if decision_of_operation == 1:
            adding_function(quantity_of_operation)
        elif decision_of_operation == 2:
            substraction_function(quantity_of_operation)
        elif decision_of_operation == 3:
            multiply_function(quantity_of_operation)
        elif decision_of_operation == 4:
            division_function(quantity_of_operation)
        else:
            print(f"{Fore.RED}üÜò –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö!")
            return

# –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è


def substraction_function(quantity_of_operation):
    i = 1
    with open("math_sub.txt", "w", encoding='utf8') as file:
        while i <= quantity_of_operation:
            number1 = random.randint(1, 100)
            number2 = random.randint(1, 100)
            correct = number1 - number2
            if correct < 0:
                continue
            i += 1
            correct = (f"{number1} - {number2} = \n")
            file.write(correct)
    generate_pdf("math_sub.txt", "math_sub.pdf")

# –¥—ñ–ª–µ–Ω–Ω—è


def division_function(quantity_of_operation):
    i = 1
    with open("math_div.txt", "w", encoding='utf8') as file:
        while i <= quantity_of_operation:
            number1 = random.randint(1, 100)
            number2 = random.randint(1, 100)
            if number1 % number2 != 0:
                continue
            i += 1
            correct = f"{number1} / {number2} = \n"
            file.write(correct)
    generate_pdf("math_div.txt", "math_div.pdf")

# –º–Ω–æ–∂–µ–Ω–Ω—è


def multiply_function(quantity_of_operation):
    i = 1
    with open("math_mul.txt", "w", encoding='utf8') as file:
        while i <= quantity_of_operation:
            number1 = random.randint(1, 100)
            number2 = random.randint(1, 100)
            correct = f"{number1} * {number2} = \n"
            i += 1
            file.write(correct)

    generate_pdf("math_mul.txt", "math_mul.pdf")

# –¥–æ–¥–∞–≤–∞–Ω–Ω—è


def adding_function(quantity_of_operation):
    i = 1
    with open("math_add.txt", "w", encoding='utf8') as file:
        while i <= quantity_of_operation:
            number1 = random.randint(1, 100)
            number2 = random.randint(1, 100)
            correct = f"{number1} + {number2} = \n"
            i += 1
            file.write(correct)
    generate_pdf("math_add.txt", "math_add.pdf")


# –∫—ñ–Ω–µ—Ü—å
if __name__ == "__main__":
    operations()
